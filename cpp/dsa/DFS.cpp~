// chauhan739's boilerplate for competetive programming
// press F9 to compile

#include <bits/stdc++.h>
typedef long long int ll;
typedef unsigned int ui;
typedef unsigned long long int ul;

using namespace std;

void DFS(int, vector<int>[], vector<bool>);

int main(){
  #ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  #endif

  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  ui test;
  cin >> test;
  while(test--){
    int m, n;
    cin >> m >> n;
    vector<int> adj[n];
    vector<bool> vis(n, false);
    while(m--){
      int u, v;
      cin >> u >> v;
      u--;
      v--;
      adj[u].push_back(v);
    }
    DFS(0, adj, vis);
  }
  return 0;
}

void DFS(int source, vector<int>adj[], vector<bool>vis){
  for(auto it = adj[source].begin(); it != adj[source].end(); ++it){
    if(!vis.at(source)){
      cout << (*it) << " ";
      vis.at(source) = true;
    }
    else DFS(source, adj, vis);
  }
}
